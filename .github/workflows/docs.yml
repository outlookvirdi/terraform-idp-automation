name: Documentation Site

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    name: 🏗️ Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper Jekyll build

      - name: 🔧 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Version supported by GitHub Pages
          bundler-cache: true

      - name: 📦 Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      - name: 📚 Install Jekyll Dependencies
        working-directory: ./docs
        run: |
          gem install bundler
          bundle config set --local path 'vendor/bundle'
          # Create Gemfile if it doesn't exist
          if [ ! -f Gemfile ]; then
            cat > Gemfile << EOF
          source 'https://rubygems.org'
          
          gem 'github-pages', group: :jekyll_plugins
          gem 'jekyll-feed'
          gem 'jekyll-sitemap'
          gem 'jekyll-seo-tag'
          gem 'webrick'
          EOF
          fi
          bundle install

      - name: 🔍 Validate Links
        working-directory: ./docs
        run: |
          # Install markdown-link-check
          npm install -g markdown-link-check
          
          # Check all markdown files
          find . -name "*.md" -not -path "./vendor/*" -not -path "./_site/*" | \
            xargs markdown-link-check --config ../.github/markdown-link-config.json --quiet

      - name: 🏗️ Build Jekyll Site
        working-directory: ./docs
        run: |
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: 📊 Generate Site Statistics
        working-directory: ./docs
        run: |
          echo "## 📊 Documentation Build Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **Pages Built**: $(find _site -name "*.html" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Markdown Files**: $(find . -name "*.md" -not -path "./vendor/*" -not -path "./_site/*" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Site Size**: $(du -sh _site | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time**: $(date)" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs/_site

  # Test job for pull requests
  test:
    name: 🧪 Test Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: 📚 Install Dependencies
        working-directory: ./docs
        run: |
          gem install bundler
          bundle config set --local path 'vendor/bundle'
          if [ ! -f Gemfile ]; then
            cat > Gemfile << EOF
          source 'https://rubygems.org'
          gem 'github-pages', group: :jekyll_plugins
          gem 'jekyll-feed'
          gem 'jekyll-sitemap'
          gem 'jekyll-seo-tag'
          gem 'webrick'
          EOF
          fi
          bundle install

      - name: 🔍 Check Jekyll Configuration
        working-directory: ./docs
        run: |
          bundle exec jekyll doctor
          bundle exec jekyll build --dry-run

      - name: 🧪 Test Build
        working-directory: ./docs
        run: |
          bundle exec jekyll build --safe --trace
        env:
          JEKYLL_ENV: test

      - name: 📝 Validate HTML
        working-directory: ./docs
        run: |
          # Install HTML validator
          npm install -g html-validate
          
          # Validate generated HTML files
          find _site -name "*.html" | head -10 | xargs html-validate || true

      - name: 📊 PR Summary
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Count files
            const docsPath = './docs';
            const markdownFiles = require('child_process')
              .execSync(`find ${docsPath} -name "*.md" -not -path "*/vendor/*" -not -path "*/_site/*" | wc -l`)
              .toString().trim();
            
            const sitePath = './docs/_site';
            let htmlFiles = 0;
            let siteSize = 'Unknown';
            
            try {
              htmlFiles = require('child_process')
                .execSync(`find ${sitePath} -name "*.html" | wc -l`)
                .toString().trim();
              siteSize = require('child_process')
                .execSync(`du -sh ${sitePath} | cut -f1`)
                .toString().trim();
            } catch (e) {
              console.log('Site not built yet');
            }
            
            const summary = `## 📖 Documentation PR Summary
            
            ### 📊 Statistics
            - **Markdown Files**: ${markdownFiles}
            - **Generated HTML Pages**: ${htmlFiles}
            - **Site Size**: ${siteSize}
            
            ### ✅ Validation Results
            - Jekyll configuration: ✅ Valid
            - Build test: ✅ Successful
            - HTML validation: ✅ Completed
            
            ### 🔗 Preview
            Once merged, the documentation will be available at:
            https://sourabh-virdi.github.io/terraform-idp-automation/
            
            ### 📝 Changed Files
            The following documentation files were modified in this PR:
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Deployment job
  deploy:
    name: 🚀 Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Documentation Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "- **Site URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # SEO and Analytics job
  seo-check:
    name: 🔍 SEO and Analytics Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Check Site Accessibility
        run: |
          # Wait for deployment to be available
          sleep 30
          
          # Basic accessibility check
          curl -f "https://sourabh-virdi.github.io/terraform-idp-automation/" || echo "Site not yet available"

      - name: 📊 Generate Sitemap Report
        working-directory: ./docs
        run: |
          if [ -f "_site/sitemap.xml" ]; then
            echo "## 📊 SEO Report" >> $GITHUB_STEP_SUMMARY
            echo "- **Sitemap**: ✅ Generated" >> $GITHUB_STEP_SUMMARY
            echo "- **Pages in Sitemap**: $(grep -c '<url>' _site/sitemap.xml || echo 0)" >> $GITHUB_STEP_SUMMARY
            echo "- **Feed**: $([ -f '_site/feed.xml' ] && echo '✅ Available' || echo '❌ Missing')" >> $GITHUB_STEP_SUMMARY
          fi

  # Notify team on deployment
  notify:
    name: 📬 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy, seo-check]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: 📬 Post Deployment Notification
        uses: actions/github-script@v6
        with:
          script: |
            const deployStatus = '${{ needs.deploy.result }}';
            const seoStatus = '${{ needs.seo-check.result }}';
            
            const emoji = deployStatus === 'success' ? '🚀' : '❌';
            const status = deployStatus === 'success' ? 'Successfully Deployed' : 'Deployment Failed';
            
            const message = `${emoji} **Documentation ${status}**
            
            **Details:**
            - Deployment: ${deployStatus === 'success' ? '✅' : '❌'} ${deployStatus}
            - SEO Check: ${seoStatus === 'success' ? '✅' : '❌'} ${seoStatus}
            - Commit: \`${context.sha.substring(0, 7)}\`
            - Site: https://sourabh-virdi.github.io/terraform-idp-automation/
            
            **Quick Links:**
            - [📖 Documentation Home](https://sourabh-virdi.github.io/terraform-idp-automation/)
            - [🚀 Getting Started](https://sourabh-virdi.github.io/terraform-idp-automation/getting-started)
            - [📦 Modules](https://sourabh-virdi.github.io/terraform-idp-automation/modules/)
            - [💡 Examples](https://sourabh-virdi.github.io/terraform-idp-automation/examples/)
            `;
            
            // Create a GitHub issue for team notification (optional)
            if (deployStatus !== 'success') {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Documentation Deployment Failed - ${new Date().toISOString().split('T')[0]}`,
                body: message,
                labels: ['documentation', 'deployment', 'urgent']
              });
            }

      - name: 🔄 Update Repository Topics
        uses: actions/github-script@v6
        if: needs.deploy.result == 'success'
        with:
          script: |
            // Update repository topics to include website info
            try {
              await github.rest.repos.replaceAllTopics({
                owner: context.repo.owner,
                repo: context.repo.repo,
                names: [
                  'terraform',
                  'identity-provider',
                  'aws-cognito',
                  'azure-ad',
                  'okta',
                  'keycloak',
                  'infrastructure-as-code',
                  'sso',
                  'authentication',
                  'documentation'
                ]
              });
            } catch (error) {
              console.log('Failed to update topics:', error);
            } 